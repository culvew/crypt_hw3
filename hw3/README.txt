I wrote this assignment in c++. there are no command line arguements to it. I start by declaring all of the different given variables(a, b, x0, p, q,and m), and calculating the other values I'd need(n, k, and h). 
I then encrypt the message. I do this by iterating through my message in h bit chunks, getting the least significant h bits, calculating my new value of x, and then XORing the these two h bit values together. I then add this to my encrypted value.
Once I've encrypted the message I need to keep track of(to "send" to the decrypting part) one more step of calculating x, how many iterations I did, and the actual encrypted message. This is the information I need to decrypt the actual message. 
The first step of decrypting the message is to calculate the original value of x0. in order to do this I use the values of p, q, a, and b. In order to calculate x0, i first had to calculate u and v. to calculate u and v, I had to calculate d1, and d2. In order to do each of these parts, I needed to use my modular exponentiation functoin from last homework. 
Once I have the x0 value, It is basically the exact same process to decrypt the message as encrypting it: get the least significant bits of encrypted message, and the new x value, xor them, and add to the new message. After all of this I succesfully got back the same message I sent. 
This algorithm is very quick seeing as how we only have to go through the message once, so it is O(n).